// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Cat {
  id   String @id @map("_id")
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Preference {
  language          String  @default("en-us")
  canReceiveMessage Boolean @default(value: true)
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  username String  @unique
  name     String
  isActive Boolean @default(value: true)

  birthdate           DateTime?
  biograph            String?
  picture             String?
  deactivationReason  String?
  preferences         Preference?
  lovelyCategoriesIds String[]    @db.ObjectId

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deactivatedAt DateTime?

  category Category? @relation(fields: [lovelyCategoriesIds], references: [id])

  Location     Location[]
  Review       Review[]
  Post         Post[]
  Like         Like[]
  Comment      Comment[]
  Device       Device[]
  Notification Notification[]
  Complaint    Complaint[]

  @@map("users")
}

model Category {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String? @unique
  title        String?
  icon         String?
  iconProvider String?
  description  String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Subcategory Subcategory[]
  Location    Location[]
  User        User[]
  Post        Post[]

  @@map("categories")
}

model Subcategory {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String  @unique
  title        String
  icon         String?
  iconProvider String?
  description  String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  category      Category? @relation(fields: [categoriesIds], references: [id])
  categoriesIds String[]  @db.ObjectId

  Post Post[]

  @@map("subcategories")
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())

  ownerId String @db.ObjectId
  postId  String @db.ObjectId

  owner User @relation(fields: [ownerId], references: [id])
  post  Post @relation(fields: [postId], references: [id])

  @@map("likes")
}

model Comment {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  text     String
  isActive Boolean @default(true)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deactivatedAt DateTime?

  ownerId String  @db.ObjectId
  postId  String  @db.ObjectId
  replyId String? @db.ObjectId

  owner User     @relation(fields: [ownerId], references: [id])
  post  Post     @relation(fields: [postId], references: [id])
  reply Comment? @relation(name: "ReplyComment", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  replies          Comment[]          @relation(name: "ReplyComment")
  CommentComplaint CommentComplaint[]

  @@map("comments")
}

model Post {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  content  String
  isActive Boolean @default(true)

  images String[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deactivatedAt DateTime?

  ownerId       String  @db.ObjectId
  categoryId    String? @db.ObjectId
  subcategoryId String? @db.ObjectId

  owner       User         @relation(fields: [ownerId], references: [id])
  category    Category?    @relation(fields: [categoryId], references: [id])
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id])

  likes         Like[]
  comments      Comment[]
  PostComplaint PostComplaint[]

  @@map("posts")
}

model Review {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  text     String
  stars    Int
  isActive Boolean @default(true)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deactivatedAt DateTime?

  ownerId    String @db.ObjectId
  locationId String @db.ObjectId

  owner           User              @relation(fields: [ownerId], references: [id])
  location        Location          @relation(fields: [locationId], references: [id])
  ReviewComplaint ReviewComplaint[]

  @@map("reviews")
}

type Geoposition {
  type        String
  coordinates Float[]
}

model Location {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  photos   String[]
  isActive Boolean  @default(true)

  address     String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId      String  @db.ObjectId
  categoryId   String? @db.ObjectId
  icon         String?
  iconProvider String?

  geoposition Geoposition

  category Category? @relation(fields: [categoryId], references: [id])
  owner    User?     @relation(fields: [ownerId], references: [id])

  Review            Review[]
  LocationComplaint LocationComplaint[]

  @@map("locations")
}

model Device {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  token    String
  isActive Boolean @default(true)
  platform String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String @db.ObjectId

  owner User @relation(fields: [ownerId], references: [id])

  @@map("devices")
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title   String
  message String
  data    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String @db.ObjectId

  owner User @relation(fields: [ownerId], references: [id])

  @@map("notifications")
}

model Complaint {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  message String?
  data    String?
  reason  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String @db.ObjectId

  owner             User                @relation(fields: [ownerId], references: [id])
  PostComplaint     PostComplaint[]
  CommentComplaint  CommentComplaint[]
  ReviewComplaint   ReviewComplaint[]
  LocationComplaint LocationComplaint[]

  @@map("complaints")
}

model PostComplaint {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  complaintId String @db.ObjectId
  postId      String @db.ObjectId

  complaint Complaint @relation(fields: [complaintId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])

  @@map("post_complaints")
}

model CommentComplaint {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  complaintId String @db.ObjectId
  commentId   String @db.ObjectId

  complaint Complaint @relation(fields: [complaintId], references: [id])
  comment   Comment   @relation(fields: [commentId], references: [id])

  @@map("comment_complaints")
}

model ReviewComplaint {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  complaintId String @db.ObjectId
  reviewId    String @db.ObjectId

  complaint Complaint @relation(fields: [complaintId], references: [id])
  review    Review    @relation(fields: [reviewId], references: [id])

  @@map("review_complaints")
}

model LocationComplaint {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  complaintId String @db.ObjectId
  locationId  String @db.ObjectId

  complaint Complaint @relation(fields: [complaintId], references: [id])
  location  Location  @relation(fields: [locationId], references: [id])

  @@map("location_complaints")
}
